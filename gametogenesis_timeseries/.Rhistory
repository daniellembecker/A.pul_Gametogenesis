# remove outliers
data_clean_chla <- master[-outliers, ]
# Residuals are not normally distributed. Attempt with log transformation.
chla_model<-lmer(log(chla.ug.cm2)~timepoint+(1|patch), data=data_clean_chla)
qqPlot(residuals(chla_model))
# Get the summary of the model
summary(chla_model)
# Perform Type III ANOVA
anova_result <- Anova(chla_model, type = 3)
# Post-hoc pairwise comparisons
pairwise_results.chla <- emmeans(chla_model, pairwise ~ timepoint, adjust = "tukey")
# Generate letters for significant differences
timepoint_cld_chla <- cld(pairwise_results.chla, Letters = letters)
# Define a threshold for identifying outliers for the 'Value' column
threshold <- 10  # For example, we consider values greater than 50 as outliers
# Filter out values beyond the threshold for the 'Value' column
filtered_chla <- master[master$chla.ug.cm2 <= threshold, ]
# Get the maximum value of cells.cm2
max_chla <- max(master$chla.ug.cm2, na.rm = TRUE)  # Make sure to handle any missing values
# make chla plot
chla_cm2 <- filtered_chla %>%
filter(!is.na(chla.ug.cm2)) %>%
filter(!is.na(timepoint))%>%
dplyr::select(colony_id, timepoint, chla.ug.cm2)%>%
ggplot(., aes(x = timepoint, y = chla.ug.cm2, fill = timepoint)) +
geom_boxplot(color="black", fill="white", alpha=0.2) +
geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) +
ylim(0, 12)+
# geom_text(data = timepoint_cld_chla, aes(label = .group, x = timepoint, y = 1.0*max_chla), vjust = -0.5, size = 14, color = "black") +
scale_x_discrete(limits = c("JAN","FEB","MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT")) +
xlab("") +
ylab(expression(bold(paste("Chlorophyll a (", mu, "g cm"^-2, ")"))))+
theme_classic() +
scale_y_continuous(limits = c(0, 8))  + # Adjust limits as needed
theme(legend.position = "none",
axis.title=element_text(face="bold", size=60),
axis.text=element_text(size=40, color="black"),
strip.text.x=element_text(face="italic", size=40)); chla_cm2
# Chunk 6
# Fit a mixed-effects model with 'patch' as a random effect
model.chlc <- lmer(chlc2.ug.cm2 ~ timepoint + (1|patch), data = master)
qqPlot(residuals(chla_model))
# Get the summary of the model
summary(chlc_model)
# Model with colony as a random effect
model_with_colony <- lmer(Host_AFDW.mg.cm2 ~ timepoint + (1|patch), data = master)
# Model without colony as a random effect
model_without_colony <- lmer(Host_AFDW.mg.cm2 ~ timepoint + (1|colony_id), data = master)
# run commparisons for AIC and BIC values
AIC(model_with_colony, model_without_colony)
BIC(model_with_colony, model_without_colony)
# Check if patch or colony_id should be used as random effect, lower AIC with patch
# Model with colony as a random effect
model_with_colony <- lmer(cells.cm2 ~ timepoint + (1|patch), data = master)
# Model without colony as a random effect
model_without_colony <- lmer(cells.cm2 ~ timepoint + (1|colony_id), data = master)
# run commparisons for AIC and BIC values
AIC(model_with_colony, model_without_colony)
BIC(model_with_colony, model_without_colony)
View(oogen_abundance)
View(temp.dat)
# Convert date.time to POSIXct format
temp.dat$date.time <- as.POSIXct(temp.dat$date.time, format="%Y-%m-%d %H:%M", tz="UTC")
#filter to not show november
temp.dat <- temp.dat %>%
filter(month != "Nov")
# Smoothed temperature plot across time
temp_summary_plot <- temp.dat %>%
ggplot(., aes(x=date.time, y= temp)) +
geom_point(colour="gray", size=0.5, alpha=0.05) +
geom_smooth(aes(), se=FALSE, method="gam", colour = "black") +
ylab("Temperature °C") +
xlab("") +
scale_x_datetime(date_breaks = "1 months", date_labels = "%b %Y")+
theme_classic() +
theme(
text=element_text(size=14, colour="black"),
axis.title=element_text(size=18, colour="black", face="bold"),
axis.text.x = element_blank(), # Hide x-axis text labels
legend.title=element_text(size=18, colour="black", face="bold")) +
ylim(25, 30);temp_summary_plot
View(master)
# Generate letters for significant differences
timepoint_cld_sym <- cld(pairwise_results.sym, Letters = letters)
View(timepoint_cld_sym)
pairwise_results.sym
pairwise_results.tot
# Post-hoc pairwise comparisons
pairwise_results.sym.bio
# Post-hoc pairwise comparisons
pairwise_results.host.bio
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Chunk 2
## install packages if you dont already have them
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("RColorBrewer")) install.packages("RColorBrewer")
if (!require("lme4")) install.packages("lme4")
if (!require("lmerTest")) install.packages("lmerTest")
if (!require("car")) install.packages("car")
if (!require("effects")) install.packages("effects")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("cowplot")) install.packages("cowplot")
if (!require("vegan")) install.packages("vegan")
if (!require("corrr")) install.packages("corrr")
if (!require("ggcorrplot")) install.packages("ggcorrplot")
if (!require("GGally")) install.packages("GGally")
if (!require("broom")) install.packages("broom")
if (!require("cowplot")) install.packages("cowplot")
# Install devtools if not already installed
if (!require("devtools")) install.packages("devtools")
# Load devtools
library(devtools)
# Install pairwiseAdonis from GitHub
devtools::install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
if (!require("corrplot")) install.packages("corrplot")
if (!require("dplyr")) install.packages("dplyr")
# load packages
library(tidyverse)
library(ggrepel)
library(plyr)
library(corrplot)
library(ggplot2)
library(RColorBrewer)
library(lme4)
library(lmerTest)
library(car)
library(lubridate)
library(effects)
library(ggfortify)
library(cowplot)
library(vegan)
library(dplyr)
library(corrr)
library(ggcorrplot)
library(GGally)
library(broom)
library(cowplot)
library(patchwork)
library(pairwiseAdonis)
# Chunk 3
# master<-read.csv("gametogenesis_timeseries_analysis/Output/master_timeseries.csv")
# Chunk 4
# # Assuming phys_data is already filtered and renamed correctly
# phys_data <- master %>%
#   dplyr::select(colony_id, timepoint, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2) %>%
#   filter(Host_AFDW.mg.cm2 > 0) %>%
#   filter(Sym_AFDW.mg.cm2 > 0) %>%
#   dplyr::rename(
#     Host_Biomass = Host_AFDW.mg.cm2,
#     Symbiont_Biomass = Sym_AFDW.mg.cm2,
#     Symbiont_Density = cells.cm2,
#     Host_Protein = host_prot_mg.cm2,
#     Holobiont_Protein = holobiont_prot_mg.cm2,
#     Total_Chlorophyll = Total_Chl_cm2)
#
# # Ensure timepoint is a factor with appropriate levels
# phys_data$timepoint <- factor(phys_data$timepoint, levels = unique(phys_data$timepoint))
#
# # Calculate IQR for Total_Chlorophyll due to outliers
# Q1 <- quantile(phys_data$Total_Chlorophyll, 0.25, na.rm = TRUE)
# Q3 <- quantile(phys_data$Total_Chlorophyll, 0.75, na.rm = TRUE)
# IQR <- Q3 - Q1
#
# # Define bounds for outliers
# lower_bound <- Q1 - 1.5 * IQR
# upper_bound <- Q3 + 1.5 * IQR
#
# # Remove outliers
# phys_data_cleaned <- phys_data %>%
#   filter(Total_Chlorophyll >= lower_bound & Total_Chlorophyll <= upper_bound)
#
# # Remove August ACR-426 datapoint from the cleaned data for host protein due to outlier
# phys_data_cleaned <- phys_data_cleaned %>%
#   filter(!(timepoint == "AUGUST" & colony_id == "ACR-426"))
#
# # Calculate mean, se and SD per timepoint
# summary_data <- do.call(rbind, by(phys_data_cleaned, phys_data_cleaned$timepoint, function(x) {
#   n <- nrow(x)  # Sample size
#
#   calculate_stats <- function(var) {
#     mean_val <- mean(var, na.rm = TRUE)
#     sd_val <- sd(var, na.rm = TRUE)
#     se_val <- sd_val / sqrt(n)
#     return(c(mean = mean_val, sd = sd_val, se = se_val))}
#
#   stats_list <- list(
#     Host_Biomass = calculate_stats(x$Host_Biomass),
#     Symbiont_Biomass = calculate_stats(x$Symbiont_Biomass),
#     Total_Chlorophyll = calculate_stats(x$Total_Chlorophyll),
#     Host_Protein = calculate_stats(x$Host_Protein),
#     Holobiont_Protein = calculate_stats(x$Holobiont_Protein),
#     Symbiont_Density = calculate_stats(x$Symbiont_Density))
#
#   result <- data.frame(timepoint = unique(x$timepoint))
#   for (var in names(stats_list)) {
#     result[[paste0(var, "_mean")]] <- stats_list[[var]]["mean"]
#     result[[paste0(var, "_sd")]] <- stats_list[[var]]["sd"]
#     result[[paste0(var, "_se")]] <- stats_list[[var]]["se"]}
#
#   return(result)}))
#
# # Convert row names to a column if needed
# summary_data$timepoint <- rownames(summary_data)
# rownames(summary_data) <- NULL
#
# # Set the timepoint factor levels in the correct order
# summary_data$timepoint <- factor(summary_data$timepoint,
#                                   levels = c("JANUARY", "FEBRUARY", "MARCH",
#                                              "APRIL", "MAY", "JUNE",
#                                              "JULY", "AUGUST", "SEPTEMBER",
#                                              "OCTOBER"))
# Chunk 5
#load histo data
oogen_abundance <- read.csv("gametogenesis_timeseries_analysis/Output/oocyte_abun_data.csv")[-1]
sperm_abundance <- read.csv("gametogenesis_timeseries_analysis/Output/sperm_abun_data.csv")[-1]
oogen_size <- read.csv("gametogenesis_timeseries_analysis/Output/oogen_size_data.csv")[-1]
sperm_size <- read.csv("gametogenesis_timeseries_analysis/Output/sperm_size_data.csv")[-1]
# Chunk 6
light.dat <- read.csv("../RAnalysis/output/environmental/mahana_light_data.csv")[, -1]
temp.dat <- read.csv("gametogenesis_timeseries_analysis/Output/mean_temp_data.csv")[, -1]
# Chunk 7
# Convert date.time to POSIXct format
temp.dat$date.time <- as.POSIXct(temp.dat$date.time, format="%Y-%m-%d %H:%M", tz="UTC")
#filter to not show november
temp.dat <- temp.dat %>%
filter(month != "Nov")
# Smoothed temperature plot across time
temp_summary_plot <- temp.dat %>%
ggplot(., aes(x=date.time, y= temp)) +
geom_point(colour="gray", size=0.5, alpha=0.05) +
geom_smooth(aes(), se=FALSE, method="gam", colour = "black") +
ylab("Temperature °C") +
xlab("") +
scale_x_datetime(date_breaks = "1 months", date_labels = "%b %Y")+
theme_classic() +
theme(
text=element_text(size=14, colour="black"),
axis.title=element_text(size=18, colour="black", face="bold"),
axis.text.x = element_blank(), # Hide x-axis text labels
legend.title=element_text(size=18, colour="black", face="bold")) +
ylim(25, 30);temp_summary_plot
View(oogen_abundance)
View(sperm_abundance)
#load data files
abundance <- read.csv("histology/data/histological_data.csv", header = T, na.strings = c("", "NA"))
#load data files
abundance <- read.csv("../../histology/data/histological_data.csv", header = T, na.strings = c("", "NA"))
#load data files
abundance <- read.csv("../data/histological_data.csv", header = T, na.strings = c("", "NA"))
master<-read.csv("gametogenesis_timeseries_analysis/Output/master_timeseries.csv")
View(master)
master<-read.csv("gametogenesis_timeseries_analysis/Output/master_timeseries.csv")
# read in metadata to add patch to master timeseries
metadata <- read.csv("gametogenesis_timeseries_analysis/master_metadata.csv")
# add ACR- before each tag number
metadata <- metadata %>%
mutate(colony_id = paste0("ACR-", colony_id))
#commbine master and metadata
master <- left_join(master, metadata)
View(master)
# make timepoints numbered
master_timepoints <- master %>%
mutate(timepoint = case_when(
Month == "January" ~ 1,
Month == "February" ~ 2,
Month == "March" ~ 3,
Month == "April" ~ 4,
Month == "May" ~ 5,
Month == "June" ~ 6,
Month == "July" ~ 7,
Month == "August" ~ 8,
Month == "September" ~ 9,
Month == "October" ~ 10,
TRUE ~ NA_integer_
))
# make timepoints numbered
master_timepoints <- master %>%
mutate(Month_Number = case_when(
timepoint == "January" ~ 1,
timepoint == "February" ~ 2,
timepoint == "March" ~ 3,
timepoint == "April" ~ 4,
timepoint == "May" ~ 5,
timepoint == "June" ~ 6,
timepoint == "July" ~ 7,
timepoint == "August" ~ 8,
timepoint == "September" ~ 9,
timepoint == "October" ~ 10,
TRUE ~ NA_integer_
))
View(master_timepoints)
# make timepoints numbered
master_timepoints <- master %>%
mutate(Month_Number = case_when(
timepoint == "JANUARY" ~ 1,
timepoint == "FEBRUARY" ~ 2,
timepoint == "MARCH" ~ 3,
timepoint == "APRIL" ~ 4,
timepoint == "MAY" ~ 5,
timepoint == "JUNE" ~ 6,
timepoint == "JULY" ~ 7,
timepoint == "AUGUST" ~ 8,
timepoint == "SEPTEMBER" ~ 9,
timepoint == "OCTOBER" ~ 10,
TRUE ~ NA_integer_
))
# make timepoints numbered
master_timepoints <- master %>%
mutate(Month_Number = case_when(
timepoint == "JANUARY" ~ 1,
timepoint == "FEBRUARY" ~ 2,
timepoint == "MARCH" ~ 3,
timepoint == "APRIL" ~ 4,
timepoint == "MAY" ~ 5,
timepoint == "JUNE" ~ 6,
timepoint == "JULY" ~ 7,
timepoint == "AUGUST" ~ 8,
timepoint == "SEPTEMBER" ~ 9,
timepoint == "OCTOBER" ~ 10,
TRUE ~ NA_integer_))  %>%
dplyr::select(colony_id, timepoint, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2)
# make timepoints numbered
master_timepoints <- master %>%
mutate(Month_Number = case_when(
timepoint == "JANUARY" ~ 1,
timepoint == "FEBRUARY" ~ 2,
timepoint == "MARCH" ~ 3,
timepoint == "APRIL" ~ 4,
timepoint == "MAY" ~ 5,
timepoint == "JUNE" ~ 6,
timepoint == "JULY" ~ 7,
timepoint == "AUGUST" ~ 8,
timepoint == "SEPTEMBER" ~ 9,
timepoint == "OCTOBER" ~ 10,
TRUE ~ NA_integer_))  %>%
dplyr::select(colony_id, timepoint, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2)
# make timepoints numbered
master_select <- master %>%
mutate(Month_Number = case_when(
timepoint == "JANUARY" ~ 1,
timepoint == "FEBRUARY" ~ 2,
timepoint == "MARCH" ~ 3,
timepoint == "APRIL" ~ 4,
timepoint == "MAY" ~ 5,
timepoint == "JUNE" ~ 6,
timepoint == "JULY" ~ 7,
timepoint == "AUGUST" ~ 8,
timepoint == "SEPTEMBER" ~ 9,
timepoint == "OCTOBER" ~ 10,
TRUE ~ NA_integer_))  %>%
dplyr::select(colony_id, timepoint, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2)
View(master_select)
# get the means per timepoint for all these physiological variables
master_means <- master_select %>%
group_by(timepoint, Month_Number) %>%
summarise(across(c(Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2,
host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2),
list(mean = ~mean(., na.rm = TRUE),
se = ~sd(., na.rm = TRUE) / sqrt(n()))),
.groups = "drop") %>%
arrange(Month_Number)
# make timepoints numbered
master_select <- master %>%
mutate(Month_Number = case_when(
timepoint == "JANUARY" ~ 1,
timepoint == "FEBRUARY" ~ 2,
timepoint == "MARCH" ~ 3,
timepoint == "APRIL" ~ 4,
timepoint == "MAY" ~ 5,
timepoint == "JUNE" ~ 6,
timepoint == "JULY" ~ 7,
timepoint == "AUGUST" ~ 8,
timepoint == "SEPTEMBER" ~ 9,
timepoint == "OCTOBER" ~ 10,
TRUE ~ NA_integer_))  %>%
dplyr::select(colony_id, Month_Number, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2)
# make timepoints numbered
master_select <- master %>%
mutate(Month_Number = case_when(
timepoint == "JANUARY" ~ 1,
timepoint == "FEBRUARY" ~ 2,
timepoint == "MARCH" ~ 3,
timepoint == "APRIL" ~ 4,
timepoint == "MAY" ~ 5,
timepoint == "JUNE" ~ 6,
timepoint == "JULY" ~ 7,
timepoint == "AUGUST" ~ 8,
timepoint == "SEPTEMBER" ~ 9,
timepoint == "OCTOBER" ~ 10,
TRUE ~ NA_integer_))  %>%
dplyr::select(colony_id, Month_Number, timepoint, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2)
# get the means per timepoint for all these physiological variables
master_means <- master_select %>%
group_by(timepoint, Month_Number) %>%
summarise(across(c(Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2,
host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2),
list(mean = ~mean(., na.rm = TRUE),
se = ~sd(., na.rm = TRUE) / sqrt(n()))),
.groups = "drop") %>%
arrange(Month_Number)
# get the means per timepoint for all these physiological variables
master_means <- master_select %>%
group_by(timepoint, Month_Number) %>%
summarise(across(c(Host_AFDW.mg.cm2:cells.cm2),
list(mean = ~mean(., na.rm = TRUE),
se = ~sd(., na.rm = TRUE) / sqrt(n()))),
.groups = "drop") %>%
arrange(Month_Number)
# get the means per timepoint for all these physiological variables
master_means <- master_select %>%
group_by(timepoint, Month_Number) %>%
dplyr::summarise(across(c(Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2,
host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2),
list(mean = ~mean(., na.rm = TRUE),
se = ~sd(., na.rm = TRUE) / sqrt(n()))),
.groups = "drop") %>%
arrange(Month_Number)
View(master_means)
all.dat <- left_join(master_means, oogen_abundance)
View(all.dat)
all.dat <- rbind(master_means, oogen_abundance)
# make timepoints numbered
master_select <- master %>%
mutate(timepoint = to_title_case(timepoint)) %>%
mutate(Month_Number = case_when(
timepoint == "January" ~ 1,
timepoint == "February" ~ 2,
timepoint == "March" ~ 3,
timepoint == "April" ~ 4,
timepoint == "May" ~ 5,
timepoint == "June" ~ 6,
timepoint == "July" ~ 7,
timepoint == "August" ~ 8,
timepoint == "September" ~ 9,
timepoint == "October" ~ 10,
TRUE ~ NA_integer_))  %>%
dplyr::select(colony_id, Month_Number, timepoint, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2)
# make timepoints numbered
master_select <- master %>%
mutate(timepoint = dplyr::to_title_case(timepoint)) %>%
mutate(Month_Number = case_when(
timepoint == "January" ~ 1,
timepoint == "February" ~ 2,
timepoint == "March" ~ 3,
timepoint == "April" ~ 4,
timepoint == "May" ~ 5,
timepoint == "June" ~ 6,
timepoint == "July" ~ 7,
timepoint == "August" ~ 8,
timepoint == "September" ~ 9,
timepoint == "October" ~ 10,
TRUE ~ NA_integer_))  %>%
dplyr::select(colony_id, Month_Number, timepoint, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2)
library(dplyr)
# make timepoints numbered
master_select <- master %>%
mutate(timepoint = to_title_case(timepoint)) %>%
mutate(Month_Number = case_when(
timepoint == "January" ~ 1,
timepoint == "February" ~ 2,
timepoint == "March" ~ 3,
timepoint == "April" ~ 4,
timepoint == "May" ~ 5,
timepoint == "June" ~ 6,
timepoint == "July" ~ 7,
timepoint == "August" ~ 8,
timepoint == "September" ~ 9,
timepoint == "October" ~ 10,
TRUE ~ NA_integer_))  %>%
dplyr::select(colony_id, Month_Number, timepoint, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2)
# Define the custom function
to_title_case <- function(x) {
gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", tolower(x), perl = TRUE)
}
# make timepoints numbered
master_select <- master %>%
mutate(timepoint = to_title_case(timepoint)) %>%
mutate(Month_Number = case_when(
timepoint == "January" ~ 1,
timepoint == "February" ~ 2,
timepoint == "March" ~ 3,
timepoint == "April" ~ 4,
timepoint == "May" ~ 5,
timepoint == "June" ~ 6,
timepoint == "July" ~ 7,
timepoint == "August" ~ 8,
timepoint == "September" ~ 9,
timepoint == "October" ~ 10,
TRUE ~ NA_integer_))  %>%
dplyr::select(colony_id, Month_Number, timepoint, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2)
# get the means per timepoint for all these physiological variables
master_means <- master_select %>%
group_by(timepoint, Month_Number) %>%
dplyr::summarise(across(c(Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2,
host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2),
list(mean = ~mean(., na.rm = TRUE),
se = ~sd(., na.rm = TRUE) / sqrt(n()))),
.groups = "drop") %>%
arrange(Month_Number)
all.dat <- rbind(master_means, oogen_abundance)
all.dat <- left_joinx(master_means, oogen_abundance)
all.dat <- left_join(master_means, oogen_abundance)
View(all.dat)
#load histo data
oogen_abundance <- read.csv("gametogenesis_timeseries_analysis/Output/oocyte_abun_data.csv")[-1]
sperm_abundance <- read.csv("gametogenesis_timeseries_analysis/Output/sperm_abun_data.csv")[-1]
oogen_size <- read.csv("gametogenesis_timeseries_analysis/Output/oogen_size_data.csv")[-1]
sperm_size <- read.csv("gametogenesis_timeseries_analysis/Output/sperm_size_data.csv")[-1]
all.dat <- left_join(master_means, oogen_abundance)
View(all.dat)
