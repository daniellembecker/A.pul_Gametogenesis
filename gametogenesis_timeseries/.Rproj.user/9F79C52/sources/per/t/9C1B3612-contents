---
title: "Multivariate analysis of gametogenesis physiological, reproductive, and environmental data"
author: "Ariana S Huffmyer, E5 RoL Team"
edited: "DM Becker"
date: "20240709"
output: 
  html_document:
    code_folding: hide
    toc: yes
    toc_depth: 6
    toc_float: yes
editor_options: 
  chunk_output_type: console
---

# Set Up    
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

```{r}
## install packages if you dont already have them
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("RColorBrewer")) install.packages("RColorBrewer")
if (!require("lme4")) install.packages("lme4")
if (!require("lmerTest")) install.packages("lmerTest")
if (!require("car")) install.packages("car")
if (!require("effects")) install.packages("effects")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("cowplot")) install.packages("cowplot")
if (!require("vegan")) install.packages("vegan")
if (!require("corrr")) install.packages("corrr")
if (!require("ggcorrplot")) install.packages("ggcorrplot")
if (!require("GGally")) install.packages("GGally")
if (!require("broom")) install.packages("broom")
if (!require("cowplot")) install.packages("cowplot")
# Install devtools if not already installed
if (!require("devtools")) install.packages("devtools")
# Load devtools
library(devtools)
# Install pairwiseAdonis from GitHub
devtools::install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
if (!require("corrplot")) install.packages("corrplot")
if (!require("dplyr")) install.packages("dplyr")

# load packages
library(tidyverse)
library(ggrepel)
library(plyr)
library(corrplot)
library(ggplot2)
library(RColorBrewer)
library(lme4)
library(lmerTest)
library(car)
library(effects)
library(ggfortify)
library(cowplot)
library(vegan)
library(dplyr)
library(corrr)
library(ggcorrplot)
library(GGally)
library(broom)
library(cowplot)
library(pairwiseAdonis)
```

# Load dataframe

Load in master dataframe generated from 1_assemble_data.Rmd.  
```{r}
master<-read.csv("gametogenesis_timeseries_analysis/Output/master_timeseries.csv")
```

# Rename columns for phys data
```{r}
phys_data <-master%>%
   dplyr::select(colony_id, timepoint, Host_AFDW.mg.cm2, Sym_AFDW.mg.cm2, Total_Chl_cm2, host_prot_mg.cm2, holobiont_prot_mg.cm2, cells.cm2, chla.ug.cm2, chlc2.ug.cm2)%>%
  filter(Host_AFDW.mg.cm2>0)%>%
  filter(Sym_AFDW.mg.cm2>0)%>%
  dplyr::rename(Host_Biomass=Host_AFDW.mg.cm2, Symbiont_Biomass=Sym_AFDW.mg.cm2, Symbiont_Density=cells.cm2, Host_Protein=host_prot_mg.cm2, Holobiont_Protein=holobiont_prot_mg.cm2, Total_Chlorophyll=Total_Chl_cm2, Chlorophylla = chla.ug.cm2, Chlorophyllc2 = chlc2.ug.cm2)

```

# Load in histological data
Select only colony_id, timepoint, Stage, geometric_mean, and gonad.type
```{r}
#load histo data
histo.data <- read.csv("../histology/data/histological_data.csv")

#Select only colony_id, timepoint, Stage, geometric_mean, and gonad.type
repo_data <- histo.data%>%
   dplyr::select(colony_id, timepoint, Stage, geometric.mean, gonad.type) %>%
   na.omit

#rename gonad.type information
repo_data <- repo_data %>%
  mutate(gonad.type = case_when(
    gonad.type == "oocyte" ~ "oocyte_size",
    gonad.type == "spermatocyte" ~ "spermary_size",
    TRUE ~ gonad.type))  # This keeps any other values unchanged
  
# Transform data from long to wide format
# Pivot data from long to wide format
repo_wide_data <- repo_data %>%
  pivot_wider(names_from = gonad.type, values_from = geometric.mean)

# Function to unnest with filling NA values
unnest_with_na <- function(df, col) {
  max_length <- max(map_int(df[[col]], length))
  df %>%
    mutate(!!col := map(!!sym(col), ~ c(.x, rep(NA, max_length - length(.x))))) %>%
    unnest(!!sym(col))
}

# Transform data to long format
repo_transform_data <- repo_wide_data %>%
  mutate(
    timepoint = toupper(timepoint),  # Capitalize timepoint
    oocyte_size = map(oocyte_size, ~ if (is.null(.x)) NA_real_ else .x),
    spermary_size = map(spermary_size, ~ if (is.null(.x)) NA_real_ else .x)) %>%
  rowwise() %>%
  mutate(max_length = max(length(oocyte_size), length(spermary_size))) %>%
  ungroup() %>%
  mutate(
    oocyte_size = map2(oocyte_size, max_length, ~ c(.x, rep(NA, .y - length(.x)))),
    spermary_size = map2(spermary_size, max_length, ~ c(.x, rep(NA, .y - length(.x))))
  ) %>%
  select(-max_length) %>%
  unnest(c(oocyte_size, spermary_size)) %>%
  # Remove rows where both oocyte_size and spermary_size are NA
  filter(!is.na(oocyte_size) | !is.na(spermary_size))



```

# Load in light and temperature data
```{r}
light.dat <- read.csv("../RAnalysis/output/environmental/mahana_light_data.csv")[, -1]

temp.dat <- read.csv("../RAnalysis/output/environmental/20240129_mahana_temp_data.csv")[, -1]

# Separate date and time from the "date.temp" column
temp.dat.sep <- temp.dat %>%
  separate(date.time, into = c("Date", "Time"), sep = " ")

# remove logger column
temp.data <- temp.dat.sep %>%
  select(-logger.number)

light.data <- light.dat %>%
  select(-logger)

# left join into environmental data
environ.dat <- left_join(light.data, temp.data)

# Rename the 'calibrated' column to 'light'
environ.dat <- environ.dat %>%
  dplyr::rename(light = calibrated)

# create a timepoint column that corresponds to the month name from the Date column
environ.data <- environ.dat %>%
  mutate(
    Date = ymd(Date),  # Ensure Date is in proper date format
    timepoint = toupper(month(Date, label = TRUE, abbr = FALSE)))

# remove date and time, just have timepoint light and temp for cor plot
environ.filt <- environ.data %>%
  select(-Date, -Time)

```

# Combine environmental, reproductive, and physiological data frames by timepoint
```{r}
all.data <- full_join(repo_transform_data, phys_data)
```

# Correlation Analysis for reproductive and physiological data
```{r}
# Prepare the data for correlation analysis
cor.df.phys.repo <- all.data %>% dplyr::select(4:13) 

# Calculate the correlation matrix, keeping NA values
cor_matrix_phys_repo <- cor(cor.df.phys.repo, use = "pairwise.complete.obs")

# Save the correlation matrix plot as a PNG file with the absolute path
png(file = "gametogenesis_timeseries_analysis/Figures/correlation-matrix-phys-repo.png", height = 1400, width = 1400)
corrplot(cor_matrix_phys_repo, 
         addCoef.col = "black", # Specify color for coefficients
         number.cex = 1.3, 
         cl.cex = 2.5, 
         tl.col = "black", 
         tl.cex = 2,
         na.label = "NA")  # This will show "NA" for missing correlations
dev.off()

# Display the correlation matrix plot without saving it
corrplot(cor_matrix_phys_repo, 
         tl.col = "black", 
         method = 'circle', 
         col = colorRampPalette(c("red", "white", "blue"))(200), 
         order = 'FPC', 
         type = 'lower', 
         diag = FALSE,
         na.label = "NA")  # This will show "NA" for missing correlations
```

# Correlation Analysis for environmental data
```{r}
# Prepare the data for correlation analysis
cor.df.environ <- environ.filt %>% dplyr::select(1:2) 

# Calculate the correlation matrix, keeping NA values
cor_matrix_environ <- cor(cor.df.environ, use = "pairwise.complete.obs")

# Save the correlation matrix plot as a PNG file with the absolute path
png(file = "gametogenesis_timeseries_analysis/Figures/correlation-matrix-environ.png", height = 1400, width = 1400)
corrplot(cor_matrix_environ, 
         addCoef.col = "black", # Specify color for coefficients
         number.cex = 1.3, 
         cl.cex = 2.5, 
         tl.col = "black", 
         tl.cex = 2,
         na.label = "NA")  # This will show "NA" for missing correlations
dev.off()

# Display the correlation matrix plot without saving it
corrplot(cor_matrix_environ, 
         tl.col = "black", 
         method = 'circle', 
         col = colorRampPalette(c("red", "white", "blue"))(200), 
         order = 'FPC', 
         type = 'lower', 
         diag = FALSE,
         na.label = "NA")  # This will show "NA" for missing correlations
```


# Aggregate data by timmepoint to compare with environmental 
```{r}
# Step 2: Aggregate the physiological and reproductive data
phys_repo_agg <- all.data %>%
  dplyr::group_by(timepoint) %>%
  summarise_if(is.numeric, ~mean(.x, na.rm = TRUE)) %>%
  ungroup()

# Step 3: Merge the datasets
combined_data <- environ.data%>%
  full_join(phys_repo_agg, by = "timepoint")

# Step 4: Create the correlation plot
cor_matrix_all <- cor(combined_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")

# Save the correlation matrix plot as a PNG file with the absolute path
png(file = "gametogenesis_timeseries_analysis/Figures/correlation-matrix-all.png", height = 1400, width = 1400)
corrplot(cor_matrix_all, 
         addCoef.col = "black", # Specify color for coefficients
         number.cex = 1.3, 
         cl.cex = 2.5, 
         tl.col = "black", 
         tl.cex = 2,
         na.label = "NA")  # This will show "NA" for missing correlations
dev.off()

# Display the correlation matrix plot without saving it
corrplot(cor_matrix_all, 
         tl.col = "black", 
         method = 'circle', 
         col = colorRampPalette(c("red", "white", "blue"))(200), 
         order = 'FPC', 
         type = 'lower', 
         diag = FALSE,
         na.label = "NA")  # This will show "NA" for missing correlations
```


Set seed for permutation tests (randomly picked). 
```{r}
set.seed(2534)
```

# Build trajectory PCA plots  

## Holobiont Responses 

### PCA's for centroid and trajectories for all phys metrics and all sizes for last four months
```{r}
# need to remove spermary size from this as it filters out for only the last four months
data.subset <- all.data 

# make only complete cases for pca data
pca_data <-data.subset[complete.cases(data.subset), ]

# Standardize the data
pca_data[,-c(1:3)]<-log(pca_data[,-c(1:3)]+1)
pca_data[,-c(1:3)]<- (pca_data[,-c(1:3)]+0.001)

# Standardize the data
scaled_pca_data <-prcomp(pca_data[c(4:13)], scale=TRUE, center=TRUE) 

# Extract PC scores
pca_scores <- as.data.frame(scaled_pca_data$x)

# Extract timepoint info
pca_info<-pca_data[c(2)]

# Add back the non-numeric columns
pca_scores$timepoint <- pca_info$timepoint

# Create a data frame for variable loadings (arrows)
loadings <- as.data.frame(scaled_pca_data$rotation)
loadings$variable <- row.names(loadings)

# Create the PCA plot with arrows
PCA_four_months <- ggplot(pca_scores, aes(x = PC1, y = PC2)) +
  geom_point(aes(color = timepoint), size = 3) +
  geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1*5, yend = PC2*5),
               arrow = arrow(length = unit(0.2, "cm")), color = "black") +
  geom_text_repel(data = loadings, aes(x = PC1*5, y = PC2*5, label = variable),
                  color = "black", size = 3) +
  theme_minimal() +
  labs(x = paste0("PC1 (", round(summary(scaled_pca_data)$importance[2,1]*100, 1), "%)"),
       y = paste0("PC2 (", round(summary(scaled_pca_data)$importance[2,2]*100, 1), "%)"));PCA_four_months


```



### PCA's for centroid and trajectories for all phys metrics and oocyte size 
```{r}
# need to remove spermary size from this as it filters out for only the last four months
data.subset_oocyte <- all.data %>% select(-spermary_size)

# make only complete cases for pca data
pca_data_oocyte <-data.subset_oocyte[complete.cases(data.subset_oocyte), ]

# Standardize the data
pca_data_oocyte[,-c(1:3)]<-log(pca_data_oocyte[,-c(1:3)]+1)
pca_data_oocyte[,-c(1:3)]<- (pca_data_oocyte[,-c(1:3)]+0.001)

# Standardize the data
scaled_pca_data_oocyte <-prcomp(pca_data_oocyte[c(4:12)], scale=TRUE, center=TRUE) 

# Extract PC scores
pca_scores_oocyte <- as.data.frame(scaled_pca_data_oocyte$x)

# Extract timepoint info
pca_info_oocyte<-pca_data_oocyte[c(2)]

# Add back the non-numeric columns
pca_scores_oocyte$timepoint <- pca_info_oocyte$timepoint

# Create a data frame for variable loadings (arrows)
loadings_oocyte <- as.data.frame(scaled_pca_data_oocyte$rotation)
loadings_oocyte$variable <- row.names(loadings_oocyte)

# Create the PCA plot with arrows
oocyte_PCA <- ggplot(pca_scores_oocyte, aes(x = PC1, y = PC2)) +
  geom_point(aes(color = timepoint), size = 3) +
  geom_segment(data = loadings_oocyte, aes(x = 0, y = 0, xend = PC1*5, yend = PC2*5),
               arrow = arrow(length = unit(0.2, "cm")), color = "black") +
  geom_text_repel(data = loadings_oocyte, aes(x = PC1*5, y = PC2*5, label = variable),
                  color = "black", size = 3) +
  theme_minimal() +
  labs(x = paste0("PC1 (", round(summary(scaled_pca_data_oocyte)$importance[2,1]*100, 1), "%)"),
       y = paste0("PC2 (", round(summary(scaled_pca_data_oocyte)$importance[2,2]*100, 1), "%)"));oocyte_PCA 


```


### PCA's for centroid and trajectories for all phys metrics and spermary size 
```{r}
# need to remove spermary size from this as it filters out for only the last four months
data.subset_spermary <- all.data %>% select(-oocyte_size)

# make only complete cases for pca data
pca_data_spermary <-data.subset_spermary[complete.cases(data.subset_spermary), ]

# Standardize the data
pca_data_spermary[,-c(1:3)]<-log(pca_data_spermary[,-c(1:3)]+1)

# Standardize the data
scaled_pca_data_spermary <-prcomp(pca_data_spermary[c(4:12)], scale=TRUE, center=TRUE) 

# Extract PC scores
pca_scores_spermary <- as.data.frame(scaled_pca_data_spermary$x)

# Extract timepoint info
pca_info_spermary<-pca_data_spermary[c(2)]

# Add back the non-numeric columns
pca_scores_spermary$timepoint <- pca_info_spermary$timepoint

# Create a data frame for variable loadings (arrows)
loadings_spermary <- as.data.frame(scaled_pca_data_spermary$rotation)
loadings_spermary$variable <- row.names(loadings_spermary)

# Create the PCA plot with arrows
spermary_PCA <- ggplot(pca_scores_spermary, aes(x = PC1, y = PC2)) +
  geom_point(aes(color = timepoint), size = 3) +
  geom_segment(data = loadings_spermary, aes(x = 0, y = 0, xend = PC1*5, yend = PC2*5),
               arrow = arrow(length = unit(0.2, "cm")), color = "black") +
  geom_text_repel(data = loadings_spermary, aes(x = PC1*5, y = PC2*5, label = variable),
                  color = "black", size = 3) +
  theme_minimal() +
  labs(x = paste0("PC1 (", round(summary(scaled_pca_data_spermary)$importance[2,1]*100, 1), "%)"),
       y = paste0("PC2 (", round(summary(scaled_pca_data_spermary)$importance[2,2]*100, 1), "%)"));spermary_PCA 


```


Examine PERMANOVA results.  
# For oocyte and spermary data last four months
```{r}
# scale data
vegan <- scale(pca_data[ ,4:13])

# PerMANOVA - partitioning the euclidean distance matrix by species
permanova<-adonis2(vegan ~ timepoint, data = pca_data, method='eu')
z_pca<-permanova
z_pca
``` 

adonis2(formula = vegan ~ timepoint, data = pca_data, method = "eu")
          Df SumOfSqs      R2      F Pr(>F)    
timepoint  3   284.13 0.42407 15.708  0.001 ***
Residual  64   385.87 0.57593                  
Total     67   670.00 1.00000 

# For oocyte only
```{r}
# scale data
vegan_oocyte <- scale(pca_data_oocyte[ ,4:12])

# PerMANOVA - partitioning the euclidean distance matrix by species
permanova_oocyte<-adonis2(vegan_oocyte ~ timepoint, data = pca_data_oocyte, method='eu')
z_pca_oocyte<-permanova_oocyte
z_pca_oocyte
``` 

adonis2(formula = vegan_oocyte ~ timepoint, data = pca_data_oocyte, method = "eu")
           Df SumOfSqs      R2      F Pr(>F)    
timepoint   8     1452 0.48017 37.872  0.001 ***
Residual  328     1572 0.51983                  
Total     336     3024 1.00000  

# For spermary only
```{r}
# scale data
vegan_spermary <- scale(pca_data_spermary[ ,4:12])

# PerMANOVA - partitioning the euclidean distance matrix by species
permanova_spermary<-adonis2(vegan_spermary ~ timepoint, data = pca_data_spermary, method='eu')
z_pca_spermary<-permanova_spermary
z_pca_spermary
``` 

adonis2(formula = vegan_spermary ~ timepoint, data = pca_data_spermary, method = "eu")
           Df SumOfSqs      R2      F Pr(>F)    
timepoint   3   502.52 0.41982 31.356  0.001 ***
Residual  130   694.48 0.58018                  
Total     133  1197.00 1.00000  

Examine dispersion this model

# For oocyte and spermary for four months
```{r}
#conduct pairwise adonis to look at pairwise permanova comparisons
pairwise.adonis(x=pca_data[ ,4:13],factors=pca_data$timepoint, sim.function="vegdist",  sim.method='euclidean', p.adjust.m='bonferroni')

#evaluate dispersion
beta<-betadisper(vegdist(pca_data[ ,4:13], "euclidian"), pca_data$timepoint)
anova(beta)

#conduct posthoc analysis of betadispersion
TukeyHSD(beta)
```
There is a difference in dispersion by timepoint, so therefore differences are likely due to both dispersion and centroid location. 


